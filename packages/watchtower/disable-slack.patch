diff --git a/docs/arguments.md b/docs/arguments.md
index 8b00de9..40e8141 100644
--- a/docs/arguments.md
+++ b/docs/arguments.md
@@ -35,8 +35,6 @@ This can be used to avoid putting secrets in the configuration file or command l
 The following arguments are currently supported (including their corresponding `WATCHTOWER_` environment variables):
  - `notification-url`
  - `notification-email-server-password`
- - `notification-slack-hook-url`
- - `notification-msteams-hook`
  - `notification-gotify-token`
  - `http-api-token`
 
diff --git a/docs/notifications.md b/docs/notifications.md
index 3042919..63a19fa 100644
--- a/docs/notifications.md
+++ b/docs/notifications.md
@@ -180,8 +180,6 @@ The types of notifications to send are set by passing a comma-separated list of
 (or corresponding environment variable `WATCHTOWER_NOTIFICATIONS`), which has the following valid values:
 
 -   `email` to send notifications via e-mail
--   `slack` to send notifications through a Slack webhook
--   `msteams` to send notifications via MSTeams webhook
 -   `gotify` to send notifications via Gotify
 
 ### `notify-upgrade`
@@ -321,51 +319,6 @@ networks:
     external: false
 ```
 
-### Slack
-
-To receive notifications in Slack, add `slack` to the `--notifications` option or the `WATCHTOWER_NOTIFICATIONS` environment variable.
-
-Additionally, you should set the Slack webhook URL using the `--notification-slack-hook-url` option or the `WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL` environment variable. This option can also reference a file, in which case the contents of the file are used.
-
-By default, watchtower will send messages under the name `watchtower`, you can customize this string through the `--notification-slack-identifier` option or the `WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER` environment variable.
-
-Other, optional, variables include:
-
--   `--notification-slack-channel` (env. `WATCHTOWER_NOTIFICATION_SLACK_CHANNEL`): A string which overrides the webhook's default channel. Example: #my-custom-channel.
-
-Example:
-
-```bash
-docker run -d \
-  --name watchtower \
-  -v /var/run/docker.sock:/var/run/docker.sock \
-  -e WATCHTOWER_NOTIFICATIONS=slack \
-  -e WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL="https://hooks.slack.com/services/xxx/yyyyyyyyyyyyyyy" \
-  -e WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER=watchtower-server-1 \
-  -e WATCHTOWER_NOTIFICATION_SLACK_CHANNEL=#my-custom-channel \
-  containrrr/watchtower
-```
-
-### Microsoft Teams
-
-To receive notifications in MSTeams channel, add `msteams` to the `--notifications` option or the `WATCHTOWER_NOTIFICATIONS` environment variable.
-
-Additionally, you should set the MSTeams webhook URL using the `--notification-msteams-hook` option or the `WATCHTOWER_NOTIFICATION_MSTEAMS_HOOK_URL` environment variable. This option can also reference a file, in which case the contents of the file are used.
-
-MSTeams notifier could send keys/values filled by `log.WithField` or `log.WithFields` as MSTeams message facts. To enable this feature add `--notification-msteams-data` flag or set `WATCHTOWER_NOTIFICATION_MSTEAMS_USE_LOG_DATA=true` environment variable.
-
-Example:
-
-```bash
-docker run -d \
-  --name watchtower \
-  -v /var/run/docker.sock:/var/run/docker.sock \
-  -e WATCHTOWER_NOTIFICATIONS=msteams \
-  -e WATCHTOWER_NOTIFICATION_MSTEAMS_HOOK_URL="https://outlook.office.com/webhook/xxxxxxxx@xxxxxxx/IncomingWebhook/yyyyyyyy/zzzzzzzzzz" \
-  -e WATCHTOWER_NOTIFICATION_MSTEAMS_USE_LOG_DATA=true \
-  containrrr/watchtower
-```
-
 ### Gotify
 
 To push a notification to your Gotify instance, register a Gotify app and specify the Gotify URL and app token:
@@ -383,4 +336,3 @@ docker run -d \
 `-e WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN` or `--notification-gotify-token` can also reference a file, in which case the contents of the file are used.
 
 If you want to disable TLS verification for the Gotify instance, you can use either `-e WATCHTOWER_NOTIFICATION_GOTIFY_TLS_SKIP_VERIFY=true` or `--notification-gotify-tls-skip-verify`.
-
diff --git a/internal/flags/flags.go b/internal/flags/flags.go
index c11cdae..87f588c 100644
--- a/internal/flags/flags.go
+++ b/internal/flags/flags.go
@@ -221,7 +221,7 @@ func RegisterNotificationFlags(rootCmd *cobra.Command) {
 		"notifications",
 		"n",
 		envStringSlice("WATCHTOWER_NOTIFICATIONS"),
-		" Notification types to send (valid: email, slack, msteams, gotify, shoutrrr)")
+		" Notification types to send (valid: email, gotify, shoutrrr)")
 
 	flags.String(
 		"notifications-level",
@@ -295,48 +295,6 @@ Should only be used for testing.`)
 		envString("WATCHTOWER_NOTIFICATION_EMAIL_SUBJECTTAG"),
 		"Subject prefix tag for notifications via mail")
 
-	flags.StringP(
-		"notification-slack-hook-url",
-		"",
-		envString("WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL"),
-		"The Slack Hook URL to send notifications to")
-
-	flags.StringP(
-		"notification-slack-identifier",
-		"",
-		envString("WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER"),
-		"A string which will be used to identify the messages coming from this watchtower instance")
-
-	flags.StringP(
-		"notification-slack-channel",
-		"",
-		envString("WATCHTOWER_NOTIFICATION_SLACK_CHANNEL"),
-		"A string which overrides the webhook's default channel. Example: #my-custom-channel")
-
-	flags.StringP(
-		"notification-slack-icon-emoji",
-		"",
-		envString("WATCHTOWER_NOTIFICATION_SLACK_ICON_EMOJI"),
-		"An emoji code string to use in place of the default icon")
-
-	flags.StringP(
-		"notification-slack-icon-url",
-		"",
-		envString("WATCHTOWER_NOTIFICATION_SLACK_ICON_URL"),
-		"An icon image URL string to use in place of the default icon")
-
-	flags.StringP(
-		"notification-msteams-hook",
-		"",
-		envString("WATCHTOWER_NOTIFICATION_MSTEAMS_HOOK_URL"),
-		"The MSTeams WebHook URL to send notifications to")
-
-	flags.BoolP(
-		"notification-msteams-data",
-		"",
-		envBool("WATCHTOWER_NOTIFICATION_MSTEAMS_USE_LOG_DATA"),
-		"The MSTeams notifier will try to extract log entry fields as MSTeams message facts")
-
 	flags.StringP(
 		"notification-gotify-url",
 		"",
@@ -427,7 +385,6 @@ func SetDefaults() {
 	viper.SetDefault("WATCHTOWER_NOTIFICATIONS_LEVEL", "info")
 	viper.SetDefault("WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT", 25)
 	viper.SetDefault("WATCHTOWER_NOTIFICATION_EMAIL_SUBJECTTAG", "")
-	viper.SetDefault("WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER", "watchtower")
 	viper.SetDefault("WATCHTOWER_LOG_LEVEL", "info")
 	viper.SetDefault("WATCHTOWER_LOG_FORMAT", "auto")
 }
@@ -514,8 +471,6 @@ func GetSecretsFromFiles(rootCmd *cobra.Command) {
 
 	secrets := []string{
 		"notification-email-server-password",
-		"notification-slack-hook-url",
-		"notification-msteams-hook",
 		"notification-gotify-token",
 		"notification-url",
 		"http-api-token",
diff --git a/pkg/notifications/msteams.go b/pkg/notifications/msteams.go
deleted file mode 100644
index cfca30e..0000000
--- a/pkg/notifications/msteams.go
+++ /dev/null
@@ -1,53 +0,0 @@
-package notifications
-
-import (
-	"net/url"
-
-	shoutrrrTeams "github.com/containrrr/shoutrrr/pkg/services/teams"
-	t "github.com/containrrr/watchtower/pkg/types"
-	log "github.com/sirupsen/logrus"
-	"github.com/spf13/cobra"
-)
-
-const (
-	msTeamsType = "msteams"
-)
-
-type msTeamsTypeNotifier struct {
-	webHookURL string
-	data       bool
-}
-
-func newMsTeamsNotifier(cmd *cobra.Command) t.ConvertibleNotifier {
-
-	flags := cmd.Flags()
-
-	webHookURL, _ := flags.GetString("notification-msteams-hook")
-	if len(webHookURL) <= 0 {
-		log.Fatal("Required argument --notification-msteams-hook(cli) or WATCHTOWER_NOTIFICATION_MSTEAMS_HOOK_URL(env) is empty.")
-	}
-
-	withData, _ := flags.GetBool("notification-msteams-data")
-	n := &msTeamsTypeNotifier{
-		webHookURL: webHookURL,
-		data:       withData,
-	}
-
-	return n
-}
-
-func (n *msTeamsTypeNotifier) GetURL(c *cobra.Command) (string, error) {
-	webhookURL, err := url.Parse(n.webHookURL)
-	if err != nil {
-		return "", err
-	}
-
-	config, err := shoutrrrTeams.ConfigFromWebhookURL(*webhookURL)
-	if err != nil {
-		return "", err
-	}
-
-	config.Color = ColorHex
-
-	return config.GetURL().String(), nil
-}
diff --git a/pkg/notifications/notifier.go b/pkg/notifications/notifier.go
index ff7b6b5..fe5388d 100644
--- a/pkg/notifications/notifier.go
+++ b/pkg/notifications/notifier.go
@@ -50,10 +50,6 @@ func AppendLegacyUrls(urls []string, cmd *cobra.Command) ([]string, time.Duratio
 		switch t {
 		case emailType:
 			legacyNotifier = newEmailNotifier(cmd)
-		case slackType:
-			legacyNotifier = newSlackNotifier(cmd)
-		case msTeamsType:
-			legacyNotifier = newMsTeamsNotifier(cmd)
 		case gotifyType:
 			legacyNotifier = newGotifyNotifier(cmd)
 		case shoutrrrType:
diff --git a/pkg/notifications/slack.go b/pkg/notifications/slack.go
deleted file mode 100644
index 9118527..0000000
--- a/pkg/notifications/slack.go
+++ /dev/null
@@ -1,85 +0,0 @@
-package notifications
-
-import (
-	"strings"
-
-	shoutrrrDisco "github.com/containrrr/shoutrrr/pkg/services/discord"
-	shoutrrrSlack "github.com/containrrr/shoutrrr/pkg/services/slack"
-	t "github.com/containrrr/watchtower/pkg/types"
-	log "github.com/sirupsen/logrus"
-	"github.com/spf13/cobra"
-)
-
-const (
-	slackType = "slack"
-)
-
-type slackTypeNotifier struct {
-	HookURL   string
-	Username  string
-	Channel   string
-	IconEmoji string
-	IconURL   string
-}
-
-func newSlackNotifier(c *cobra.Command) t.ConvertibleNotifier {
-	flags := c.Flags()
-
-	hookURL, _ := flags.GetString("notification-slack-hook-url")
-	userName, _ := flags.GetString("notification-slack-identifier")
-	channel, _ := flags.GetString("notification-slack-channel")
-	emoji, _ := flags.GetString("notification-slack-icon-emoji")
-	iconURL, _ := flags.GetString("notification-slack-icon-url")
-
-	n := &slackTypeNotifier{
-		HookURL:   hookURL,
-		Username:  userName,
-		Channel:   channel,
-		IconEmoji: emoji,
-		IconURL:   iconURL,
-	}
-	return n
-}
-
-func (s *slackTypeNotifier) GetURL(c *cobra.Command) (string, error) {
-	trimmedURL := strings.TrimRight(s.HookURL, "/")
-	trimmedURL = strings.TrimPrefix(trimmedURL, "https://")
-	parts := strings.Split(trimmedURL, "/")
-
-	if parts[0] == "discord.com" || parts[0] == "discordapp.com" {
-		log.Debug("Detected a discord slack wrapper URL, using shoutrrr discord service")
-		conf := &shoutrrrDisco.Config{
-			WebhookID:  parts[len(parts)-3],
-			Token:      parts[len(parts)-2],
-			Color:      ColorInt,
-			SplitLines: true,
-			Username:   s.Username,
-		}
-
-		if s.IconURL != "" {
-			conf.Avatar = s.IconURL
-		}
-
-		return conf.GetURL().String(), nil
-	}
-
-	webhookToken := strings.Replace(s.HookURL, "https://hooks.slack.com/services/", "", 1)
-
-	conf := &shoutrrrSlack.Config{
-		BotName: s.Username,
-		Color:   ColorHex,
-		Channel: "webhook",
-	}
-
-	if s.IconURL != "" {
-		conf.Icon = s.IconURL
-	} else if s.IconEmoji != "" {
-		conf.Icon = s.IconEmoji
-	}
-
-	if err := conf.Token.SetFromProp(webhookToken); err != nil {
-		return "", err
-	}
-
-	return conf.GetURL().String(), nil
-}
