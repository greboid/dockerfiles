From 7987df8072b2aac561bd568254591ba330d5ad41 Mon Sep 17 00:00:00 2001
From: Greg Holmes <git@greg.holmes.name>
Date: Tue, 8 Nov 2022 17:54:36 +0000
Subject: [PATCH] Remove slack and teams

---
 internal/flags/flags.go       | 46 +------------------
 pkg/notifications/msteams.go  | 53 ----------------------
 pkg/notifications/notifier.go |  4 --
 pkg/notifications/slack.go    | 85 -----------------------------------
 4 files changed, 1 insertion(+), 187 deletions(-)
 delete mode 100644 pkg/notifications/msteams.go
 delete mode 100644 pkg/notifications/slack.go

diff --git a/internal/flags/flags.go b/internal/flags/flags.go
index 5428b95..71a1e18 100644
--- a/internal/flags/flags.go
+++ b/internal/flags/flags.go
@@ -196,7 +196,7 @@ func RegisterNotificationFlags(rootCmd *cobra.Command) {
 		"notifications",
 		"n",
 		viper.GetStringSlice("WATCHTOWER_NOTIFICATIONS"),
-		" Notification types to send (valid: email, slack, msteams, gotify, shoutrrr)")
+		" Notification types to send (valid: email, gotify, shoutrrr)")
 
 	flags.String(
 		"notifications-level",
@@ -270,48 +270,6 @@ Should only be used for testing.`)
 		viper.GetString("WATCHTOWER_NOTIFICATION_EMAIL_SUBJECTTAG"),
 		"Subject prefix tag for notifications via mail")
 
-	flags.StringP(
-		"notification-slack-hook-url",
-		"",
-		viper.GetString("WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL"),
-		"The Slack Hook URL to send notifications to")
-
-	flags.StringP(
-		"notification-slack-identifier",
-		"",
-		viper.GetString("WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER"),
-		"A string which will be used to identify the messages coming from this watchtower instance")
-
-	flags.StringP(
-		"notification-slack-channel",
-		"",
-		viper.GetString("WATCHTOWER_NOTIFICATION_SLACK_CHANNEL"),
-		"A string which overrides the webhook's default channel. Example: #my-custom-channel")
-
-	flags.StringP(
-		"notification-slack-icon-emoji",
-		"",
-		viper.GetString("WATCHTOWER_NOTIFICATION_SLACK_ICON_EMOJI"),
-		"An emoji code string to use in place of the default icon")
-
-	flags.StringP(
-		"notification-slack-icon-url",
-		"",
-		viper.GetString("WATCHTOWER_NOTIFICATION_SLACK_ICON_URL"),
-		"An icon image URL string to use in place of the default icon")
-
-	flags.StringP(
-		"notification-msteams-hook",
-		"",
-		viper.GetString("WATCHTOWER_NOTIFICATION_MSTEAMS_HOOK_URL"),
-		"The MSTeams WebHook URL to send notifications to")
-
-	flags.BoolP(
-		"notification-msteams-data",
-		"",
-		viper.GetBool("WATCHTOWER_NOTIFICATION_MSTEAMS_USE_LOG_DATA"),
-		"The MSTeams notifier will try to extract log entry fields as MSTeams message facts")
-
 	flags.StringP(
 		"notification-gotify-url",
 		"",
@@ -463,8 +421,6 @@ func GetSecretsFromFiles(rootCmd *cobra.Command) {
 
 	secrets := []string{
 		"notification-email-server-password",
-		"notification-slack-hook-url",
-		"notification-msteams-hook",
 		"notification-gotify-token",
 		"notification-url",
 	}
diff --git a/pkg/notifications/msteams.go b/pkg/notifications/msteams.go
deleted file mode 100644
index cfca30e..0000000
--- a/pkg/notifications/msteams.go
+++ /dev/null
@@ -1,53 +0,0 @@
-package notifications
-
-import (
-	"net/url"
-
-	shoutrrrTeams "github.com/containrrr/shoutrrr/pkg/services/teams"
-	t "github.com/containrrr/watchtower/pkg/types"
-	log "github.com/sirupsen/logrus"
-	"github.com/spf13/cobra"
-)
-
-const (
-	msTeamsType = "msteams"
-)
-
-type msTeamsTypeNotifier struct {
-	webHookURL string
-	data       bool
-}
-
-func newMsTeamsNotifier(cmd *cobra.Command) t.ConvertibleNotifier {
-
-	flags := cmd.Flags()
-
-	webHookURL, _ := flags.GetString("notification-msteams-hook")
-	if len(webHookURL) <= 0 {
-		log.Fatal("Required argument --notification-msteams-hook(cli) or WATCHTOWER_NOTIFICATION_MSTEAMS_HOOK_URL(env) is empty.")
-	}
-
-	withData, _ := flags.GetBool("notification-msteams-data")
-	n := &msTeamsTypeNotifier{
-		webHookURL: webHookURL,
-		data:       withData,
-	}
-
-	return n
-}
-
-func (n *msTeamsTypeNotifier) GetURL(c *cobra.Command) (string, error) {
-	webhookURL, err := url.Parse(n.webHookURL)
-	if err != nil {
-		return "", err
-	}
-
-	config, err := shoutrrrTeams.ConfigFromWebhookURL(*webhookURL)
-	if err != nil {
-		return "", err
-	}
-
-	config.Color = ColorHex
-
-	return config.GetURL().String(), nil
-}
diff --git a/pkg/notifications/notifier.go b/pkg/notifications/notifier.go
index ff7b6b5..fe5388d 100644
--- a/pkg/notifications/notifier.go
+++ b/pkg/notifications/notifier.go
@@ -50,10 +50,6 @@ func AppendLegacyUrls(urls []string, cmd *cobra.Command) ([]string, time.Duratio
 		switch t {
 		case emailType:
 			legacyNotifier = newEmailNotifier(cmd)
-		case slackType:
-			legacyNotifier = newSlackNotifier(cmd)
-		case msTeamsType:
-			legacyNotifier = newMsTeamsNotifier(cmd)
 		case gotifyType:
 			legacyNotifier = newGotifyNotifier(cmd)
 		case shoutrrrType:
diff --git a/pkg/notifications/slack.go b/pkg/notifications/slack.go
deleted file mode 100644
index 9118527..0000000
--- a/pkg/notifications/slack.go
+++ /dev/null
@@ -1,85 +0,0 @@
-package notifications
-
-import (
-	"strings"
-
-	shoutrrrDisco "github.com/containrrr/shoutrrr/pkg/services/discord"
-	shoutrrrSlack "github.com/containrrr/shoutrrr/pkg/services/slack"
-	t "github.com/containrrr/watchtower/pkg/types"
-	log "github.com/sirupsen/logrus"
-	"github.com/spf13/cobra"
-)
-
-const (
-	slackType = "slack"
-)
-
-type slackTypeNotifier struct {
-	HookURL   string
-	Username  string
-	Channel   string
-	IconEmoji string
-	IconURL   string
-}
-
-func newSlackNotifier(c *cobra.Command) t.ConvertibleNotifier {
-	flags := c.Flags()
-
-	hookURL, _ := flags.GetString("notification-slack-hook-url")
-	userName, _ := flags.GetString("notification-slack-identifier")
-	channel, _ := flags.GetString("notification-slack-channel")
-	emoji, _ := flags.GetString("notification-slack-icon-emoji")
-	iconURL, _ := flags.GetString("notification-slack-icon-url")
-
-	n := &slackTypeNotifier{
-		HookURL:   hookURL,
-		Username:  userName,
-		Channel:   channel,
-		IconEmoji: emoji,
-		IconURL:   iconURL,
-	}
-	return n
-}
-
-func (s *slackTypeNotifier) GetURL(c *cobra.Command) (string, error) {
-	trimmedURL := strings.TrimRight(s.HookURL, "/")
-	trimmedURL = strings.TrimPrefix(trimmedURL, "https://")
-	parts := strings.Split(trimmedURL, "/")
-
-	if parts[0] == "discord.com" || parts[0] == "discordapp.com" {
-		log.Debug("Detected a discord slack wrapper URL, using shoutrrr discord service")
-		conf := &shoutrrrDisco.Config{
-			WebhookID:  parts[len(parts)-3],
-			Token:      parts[len(parts)-2],
-			Color:      ColorInt,
-			SplitLines: true,
-			Username:   s.Username,
-		}
-
-		if s.IconURL != "" {
-			conf.Avatar = s.IconURL
-		}
-
-		return conf.GetURL().String(), nil
-	}
-
-	webhookToken := strings.Replace(s.HookURL, "https://hooks.slack.com/services/", "", 1)
-
-	conf := &shoutrrrSlack.Config{
-		BotName: s.Username,
-		Color:   ColorHex,
-		Channel: "webhook",
-	}
-
-	if s.IconURL != "" {
-		conf.Icon = s.IconURL
-	} else if s.IconEmoji != "" {
-		conf.Icon = s.IconEmoji
-	}
-
-	if err := conf.Token.SetFromProp(webhookToken); err != nil {
-		return "", err
-	}
-
-	return conf.GetURL().String(), nil
-}
-- 
2.38.1

